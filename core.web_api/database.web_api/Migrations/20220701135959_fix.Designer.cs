// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using database.trading;

#nullable disable

namespace database.trading.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220701135959_fix")]
    partial class fix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.2.22153.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("database.trading.DB_Models.Kripto.historijskiPodaci", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<double>("close")
                        .HasColumnType("float");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("high")
                        .HasColumnType("float");

                    b.Property<double>("low")
                        .HasColumnType("float");

                    b.Property<int>("market_cap")
                        .HasColumnType("int");

                    b.Property<double>("open")
                        .HasColumnType("float");

                    b.Property<int?>("valutaId")
                        .HasColumnType("int");

                    b.Property<int>("volume")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("valutaId");

                    b.ToTable("histPodaci");
                });

            modelBuilder.Entity("database.trading.DB_Models.Kripto.ponuda", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ponude");
                });

            modelBuilder.Entity("database.trading.DB_Models.Kripto.valuta", b =>
                {
                    b.Property<int>("valuta_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("valuta_id"), 1L, 1);

                    b.Property<string>("datum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("iternval")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("last_high")
                        .HasColumnType("float");

                    b.Property<string>("logo_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oznaka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ponudaId")
                        .HasColumnType("int");

                    b.Property<double>("promjena")
                        .HasColumnType("float");

                    b.Property<int>("rank")
                        .HasColumnType("int");

                    b.Property<int>("total_suplay")
                        .HasColumnType("int");

                    b.Property<decimal>("vrijednost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("valuta_id");

                    b.HasIndex("ponudaId");

                    b.ToTable("valute");
                });

            modelBuilder.Entity("database.trading.DB_Models.Security.auth_user", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lozinka")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("id");

                    b.ToTable("auth_korisnik");
                });

            modelBuilder.Entity("database.trading.DB_Models.Security.token", b =>
                {
                    b.Property<int>("token_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("token_id"), 1L, 1);

                    b.Property<bool>("expired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("issued")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<bool>("valid")
                        .HasColumnType("bit");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("token_id");

                    b.HasIndex("userId");

                    b.ToTable("tokeni");
                });

            modelBuilder.Entity("database.trading.DB_Models.Security.user_confirmation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("user_confirmacije");
                });

            modelBuilder.Entity("database.trading.DB_Models.Trading.narudzba", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<double>("cijena")
                        .HasColumnType("float");

                    b.Property<double>("kolicina")
                        .HasColumnType("float");

                    b.Property<DateTime>("kreirana")
                        .HasColumnType("datetime2");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tip")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int>("valutaId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.HasIndex("valutaId");

                    b.ToTable("narudzbe");
                });

            modelBuilder.Entity("database.trading.DB_Models.User.kreditna", b =>
                {
                    b.Property<int>("kreditna_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("kreditna_id"), 1L, 1);

                    b.Property<string>("broj_kartice")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("datum_isteka")
                        .HasColumnType("datetime2");

                    b.Property<string>("naziv_izdavaca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("kreditna_id");

                    b.ToTable("kreditneKartice");
                });

            modelBuilder.Entity("database.trading.DB_Models.User.user", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"), 1L, 1);

                    b.Property<int>("authUserId")
                        .HasColumnType("int");

                    b.Property<string>("broj_telefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("datum_kreiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("datum_rodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("drzava")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ime_prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("spol")
                        .HasColumnType("int");

                    b.HasKey("user_id");

                    b.HasIndex("authUserId");

                    b.ToTable("korisnici");
                });

            modelBuilder.Entity("database.trading.DB_Models.User.Wallet.wallet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("kreditnaId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("kreditnaId");

                    b.HasIndex("userId");

                    b.ToTable("walleti");
                });

            modelBuilder.Entity("database.trading.DB_Models.User.Wallet.wallet_imovina", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<double>("kolicina_valute")
                        .HasColumnType("float");

                    b.Property<string>("naziv_valute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("valuta_id")
                        .HasColumnType("int");

                    b.Property<int>("walletId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("walletId");

                    b.ToTable("wallet_imovine");
                });

            modelBuilder.Entity("database.trading.DB_Models.User.Wallet.walletTransakcija", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<double>("kolicina_transakcije")
                        .HasColumnType("float");

                    b.Property<string>("naziv_valute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tip_metode_id")
                        .HasColumnType("int");

                    b.Property<int>("tip_transakcije_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("vrijeme_obavljanja")
                        .HasColumnType("datetime2");

                    b.Property<int>("walletId")
                        .HasColumnType("int");

                    b.Property<double>("wcash")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("walletId");

                    b.ToTable("wallet_transakcije");
                });

            modelBuilder.Entity("database.trading.DB_Models.Kripto.historijskiPodaci", b =>
                {
                    b.HasOne("database.trading.DB_Models.Kripto.valuta", "valuta")
                        .WithMany()
                        .HasForeignKey("valutaId");

                    b.Navigation("valuta");
                });

            modelBuilder.Entity("database.trading.DB_Models.Kripto.valuta", b =>
                {
                    b.HasOne("database.trading.DB_Models.Kripto.ponuda", "ponuda")
                        .WithMany()
                        .HasForeignKey("ponudaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ponuda");
                });

            modelBuilder.Entity("database.trading.DB_Models.Security.token", b =>
                {
                    b.HasOne("database.trading.DB_Models.User.user", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("database.trading.DB_Models.Security.user_confirmation", b =>
                {
                    b.HasOne("database.trading.DB_Models.User.user", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("database.trading.DB_Models.Trading.narudzba", b =>
                {
                    b.HasOne("database.trading.DB_Models.User.user", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("database.trading.DB_Models.Kripto.valuta", "valuta")
                        .WithMany()
                        .HasForeignKey("valutaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");

                    b.Navigation("valuta");
                });

            modelBuilder.Entity("database.trading.DB_Models.User.user", b =>
                {
                    b.HasOne("database.trading.DB_Models.Security.auth_user", "authUser")
                        .WithMany()
                        .HasForeignKey("authUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authUser");
                });

            modelBuilder.Entity("database.trading.DB_Models.User.Wallet.wallet", b =>
                {
                    b.HasOne("database.trading.DB_Models.User.kreditna", "kreditna")
                        .WithMany()
                        .HasForeignKey("kreditnaId");

                    b.HasOne("database.trading.DB_Models.User.user", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("kreditna");

                    b.Navigation("user");
                });

            modelBuilder.Entity("database.trading.DB_Models.User.Wallet.wallet_imovina", b =>
                {
                    b.HasOne("database.trading.DB_Models.User.Wallet.wallet", "wallet")
                        .WithMany()
                        .HasForeignKey("walletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("wallet");
                });

            modelBuilder.Entity("database.trading.DB_Models.User.Wallet.walletTransakcija", b =>
                {
                    b.HasOne("database.trading.DB_Models.User.Wallet.wallet", "wallet")
                        .WithMany()
                        .HasForeignKey("walletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("wallet");
                });
#pragma warning restore 612, 618
        }
    }
}
